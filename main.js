
/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
console.warn('Jupyter Plugin Bundle Loaded');

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => JupyterNotebookPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// renderer.ts
var import_obsidian = require("obsidian");
async function renderNotebook(notebook, container, app, component) {
  try {
    if (!notebook || !Array.isArray(notebook.cells)) {
      throw new Error("\u65E0\u6548\u7684 Jupyter \u7B14\u8BB0\u672C\u683C\u5F0F");
    }
    const notebookContainer = container.createEl("div", {
      cls: "jupyter-notebook"
    });
    for (const cell of notebook.cells) {
      const cellElement = notebookContainer.createEl("div", {
        cls: "jupyter-cell"
      });
      switch (cell.cell_type) {
        case "markdown":
          renderMarkdownCell(cell, cellElement, app, component);
          break;
        case "code":
          await renderCodeCell(cell, cellElement, app, component);
          break;
      }
    }
  } catch (error) {
    const errorElement = container.createEl("div", {
      cls: "jupyter-error",
      text: `\u89E3\u6790\u7B14\u8BB0\u672C\u51FA\u9519: ${error.message}`
    });
    console.error("Jupyter \u7B14\u8BB0\u672C\u89E3\u6790\u9519\u8BEF:", error);
  }
}
async function renderMarkdownCell(cell, container, app, component) {
  try {
    const content = cell.source.join("");
    const markdownContainer = container.createEl("div", {
      cls: "jupyter-markdown-cell"
    });
    await import_obsidian.MarkdownRenderer.render(
      app,
      content,
      markdownContainer,
      "./",
      component
    );
  } catch (error) {
    console.error("Markdown \u6E32\u67D3\u9519\u8BEF:", error);
    container.createEl("div", {
      text: `Markdown \u6E32\u67D3\u9519\u8BEF: ${error.message}`,
      cls: "jupyter-error"
    });
  }
}
async function renderCodeCell(cell, container, app, component) {
  var _a, _b;
  console.log("renderCodeCell", cell);
  const codeContainer = container.createEl("div", {
    cls: "jupyter-code-input"
  });
  const languageLabel = codeContainer.createEl("div", {
    cls: "jupyter-code-language"
  });
  const language = ((_b = (_a = cell.metadata) == null ? void 0 : _a.vscode) == null ? void 0 : _b.languageId) || "python";
  languageLabel.setText(language);
  const sourceCode = cell.source.join("");
  const markdownCode = "```" + language + "\n" + sourceCode + "\n```";
  await import_obsidian.MarkdownRenderer.render(
    app,
    markdownCode,
    codeContainer,
    "./",
    component
  );
  if (cell.outputs && cell.outputs.length > 0) {
    const outputContainer = container.createEl("div", {
      cls: "jupyter-output"
    });
    for (const output of cell.outputs) {
      renderOutput(output, outputContainer);
    }
  }
}
function renderOutput(output, container) {
  if (output.output_type === "stream") {
    container.createEl("pre", {
      text: output.text.join(""),
      cls: "jupyter-output-stream"
    });
  } else if (output.output_type === "execute_result" || output.output_type === "display_data") {
    if (output.data["text/plain"]) {
      container.createEl("pre", {
        text: output.data["text/plain"].join(""),
        cls: "jupyter-output-result"
      });
    }
    if (output.data["image/png"]) {
      const imgContainer = container.createEl("div", {
        cls: "jupyter-output-image"
      });
      const img = imgContainer.createEl("img", {
        attr: {
          src: `data:image/png;base64,${output.data["image/png"]}`,
          alt: "Jupyter\u8F93\u51FA\u56FE\u50CF"
        }
      });
    }
    if (output.data["image/svg+xml"]) {
      const svgContainer = container.createEl("div", {
        cls: "jupyter-output-svg"
      });
      if (typeof output.data["image/svg+xml"] === "string") {
        svgContainer.innerHTML = output.data["image/svg+xml"];
      } else if (Array.isArray(output.data["image/svg+xml"])) {
        svgContainer.innerHTML = output.data["image/svg+xml"].join("");
      }
    }
    if (output.data["text/html"]) {
      const htmlContainer = container.createEl("div", {
        cls: "jupyter-output-html"
      });
      htmlContainer.innerHTML = Array.isArray(output.data["text/html"]) ? output.data["text/html"].join("") : output.data["text/html"];
    }
  }
}

// main.ts
var VIEW_TYPE_JUPYTER = "jupyter-notebook";
var JupyterView = class extends import_obsidian2.TextFileView {
  constructor(leaf) {
    super(leaf);
    this.data = "";
    console.log("JupyterView \u521D\u59CB\u5316");
  }
  getViewType() {
    return VIEW_TYPE_JUPYTER;
  }
  getDisplayText() {
    var _a;
    const filename = ((_a = this.file) == null ? void 0 : _a.basename) || "Jupyter Notebook";
    console.log("\u5F53\u524D\u6587\u4EF6\u540D:", filename);
    return filename;
  }
  getIcon() {
    return "code";
  }
  /**
   * 设置视图内容
   * @param data - 文件内容
   * @param clear - 是否清除现有内容
   */
  async setViewData(data, clear) {
    this.data = data;
    try {
      this.contentEl.empty();
      if (!data) {
        console.error("\u6587\u4EF6\u5185\u5BB9\u4E3A\u7A7A");
        throw new Error("\u6587\u4EF6\u5185\u5BB9\u4E3A\u7A7A");
      }
      const notebook = JSON.parse(data);
      if (!notebook || !Array.isArray(notebook.cells)) {
        console.error("\u65E0\u6548\u7684\u7B14\u8BB0\u672C\u683C\u5F0F:", notebook);
        throw new Error("\u65E0\u6548\u7684 Jupyter \u7B14\u8BB0\u672C\u683C\u5F0F");
      }
      await renderNotebook(notebook, this.contentEl, this.app, this);
    } catch (error) {
      console.error("Jupyter \u7B14\u8BB0\u672C\u52A0\u8F7D\u9519\u8BEF:", error);
      console.error("\u9519\u8BEF\u5806\u6808:", error.stack);
      this.contentEl.empty();
      this.contentEl.createEl("div", {
        cls: "jupyter-error",
        text: `\u52A0\u8F7D Jupyter \u7B14\u8BB0\u672C\u65F6\u51FA\u9519: ${error.message}`
      });
      const retryButton = this.contentEl.createEl("button", {
        text: "\u91CD\u8BD5\u52A0\u8F7D",
        cls: "jupyter-retry-button"
      });
      retryButton.addEventListener("click", async () => {
        console.log("\u89E6\u53D1\u91CD\u8BD5\u52A0\u8F7D");
        await this.setViewData(this.data, true);
      });
    }
  }
  /**
   * 统计笔记本中各类型单元格的数量
   * @param cells - 单元格数组
   * @returns 单元格类型统计对象
   */
  getCellTypeStats(cells) {
    return cells.reduce((stats, cell) => {
      stats[cell.cell_type] = (stats[cell.cell_type] || 0) + 1;
      return stats;
    }, {});
  }
  clear() {
    console.log("\u6E05\u9664\u89C6\u56FE\u5185\u5BB9");
    this.data = "";
    this.contentEl.empty();
  }
  getViewData() {
    return this.data;
  }
  async refresh() {
    console.log("\u5237\u65B0\u89C6\u56FE");
    if (this.data) {
      await this.setViewData(this.data, true);
    }
  }
};
var JupyterNotebookPlugin = class extends import_obsidian2.Plugin {
  async onload() {
    setTimeout(() => {
      console.warn("Plugin loaded:", this.app.plugins.plugins["obsidian-jupyter-notebook"] ? "Yes" : "No");
    }, 1e3);
    this.registerView(
      VIEW_TYPE_JUPYTER,
      (leaf) => new JupyterView(leaf)
    );
    this.registerExtensions(["ipynb"], VIEW_TYPE_JUPYTER);
    this.addCommand({
      id: "refresh-jupyter-notebook",
      name: "\u5237\u65B0 Jupyter \u7B14\u8BB0\u672C\u89C6\u56FE",
      checkCallback: (checking) => {
        const activeView = this.app.workspace.getActiveViewOfType(JupyterView);
        if (activeView) {
          if (!checking) {
            activeView.refresh();
          }
          return true;
        }
        return false;
      }
    });
    this.app.workspace.onLayoutReady(() => {
      this.registerEditorSuggest(new JupyterFileSuggest(this.app));
    });
  }
  async onunload() {
    console.log("\u5378\u8F7D Jupyter Notebook \u63D2\u4EF6");
    this.app.workspace.detachLeavesOfType(VIEW_TYPE_JUPYTER);
  }
};
var JupyterFileSuggest = class extends import_obsidian2.EditorSuggest {
  constructor(app) {
    super(app);
  }
  onTrigger(cursor, editor) {
    const line = editor.getLine(cursor.line);
    const beforeCursor = line.slice(0, cursor.ch);
    if (beforeCursor.endsWith("[.")) {
      return {
        start: { line: cursor.line, ch: cursor.ch - 2 },
        end: { line: cursor.line, ch: cursor.ch + 1 },
        query: ""
      };
    }
    const lastTrigger = beforeCursor.lastIndexOf("[.");
    console.log("lastTrigger", lastTrigger);
    if (lastTrigger === -1)
      return null;
    let query = line.slice(lastTrigger + 2, cursor.ch);
    const queryCloseBracket = query.indexOf("]");
    if (queryCloseBracket !== -1) {
      query = query.slice(0, queryCloseBracket);
    }
    const hasIpynbFile = this.app.vault.getFiles().some((file) => file.extension === "ipynb" && (file.basename.toLowerCase().includes(query.toLowerCase()) || file.path.toLowerCase().includes(query.toLowerCase())));
    if (!hasIpynbFile)
      return null;
    return {
      start: { line: cursor.line, ch: lastTrigger },
      end: { line: cursor.line, ch: cursor.ch + 1 },
      query
    };
  }
  selectSuggestion(file, evt) {
    if (!this.context)
      return;
    const editor = this.context.editor;
    const { start, end } = this.context;
    const relativePath = file.path;
    const suggestionText = `[[${relativePath}|\u{1F4D3} ${file.basename}]]`;
    editor.replaceRange(
      suggestionText,
      { line: start.line, ch: start.ch },
      // 从 [. 开始
      { line: start.line, ch: end.ch }
    );
    editor.setCursor({
      line: start.line,
      ch: start.ch + suggestionText.length
    });
  }
  // 添加是否应该自动选择第一个建议的检查
  shouldSelectFirstItem() {
    return true;
  }
  // 检查是否应该接受建议
  shouldAcceptSuggestion(suggestion) {
    return true;
  }
  // 检查是否应该显示建议
  shouldShowSuggestion() {
    return true;
  }
  getSuggestions(context) {
    const query = context.query.toLowerCase();
    console.log("Getting suggestions for query:", query);
    const files = this.app.vault.getFiles().filter((file) => {
      const isMatch = file.extension === "ipynb" && (file.basename.toLowerCase().includes(query) || file.path.toLowerCase().includes(query));
      return isMatch;
    });
    console.log(files);
    console.log("Found matching files:", files.length);
    return files;
  }
  renderSuggestion(file, el) {
    const suggestionEl = el.createEl("div", {
      cls: "jupyter-suggestion"
    });
    suggestionEl.createEl("span", {
      cls: "suggestion-icon",
      text: "\u{1F4D3} "
    });
    suggestionEl.createEl("span", {
      cls: "suggestion-file",
      text: file.basename
    });
    if (file.parent && file.parent.path !== "/") {
      suggestionEl.createEl("span", {
        cls: "suggestion-path",
        text: ` (${file.parent.path})`
      });
    }
  }
};
